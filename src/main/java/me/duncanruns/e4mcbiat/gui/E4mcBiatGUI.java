package me.duncanruns.e4mcbiat.gui;

import com.formdev.flatlaf.FlatDarkLaf;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import me.duncanruns.e4mcbiat.E4mcClient;
import me.duncanruns.e4mcbiat.util.ExceptionUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.StringSelection;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Optional;

public class E4mcBiatGUI extends JFrame {
    private JPanel mainPanel;
    private JButton copyDomainButton;
    private JLabel label;
    private JButton setPortButton;
    private String domain = "None";
    private final E4mcClient e4mcClient = new E4mcClient(this::onDomainAssigned, this::onBroadcast);

    public E4mcBiatGUI() {
        setContentPane(mainPanel);
        setTitle("e4mc (but it's a tool)");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);

        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    e4mcClient.close();
                } catch (Exception ignored) {
                }
            }
        });
        setupButtons();

        pack();
        revalidate();
        setSize(275, getHeight());
        setResizable(false);
    }

    public static void main(String[] args) {
        FlatDarkLaf.setup();
        E4mcBiatGUI e4mcBiatGUI = new E4mcBiatGUI();
        e4mcBiatGUI.setVisible(true);
        e4mcBiatGUI.runClient();
    }

    private void setupButtons() {
        copyDomainButton.addActionListener(a -> {
            try {
                Toolkit.getDefaultToolkit().getSystemClipboard().setContents(new StringSelection(domain), null);
            } catch (Throwable t) {
                JOptionPane.showMessageDialog(this, "Failed to copy to clipboard:\n" + ExceptionUtil.toDetailedString(t), "Failed to copy!", JOptionPane.ERROR_MESSAGE);
            }
        });
        setPortButton.addActionListener(a -> {
            String errorMessage = "";
            while (true) {
                String input = Optional.ofNullable(JOptionPane.showInputDialog(this, errorMessage + "Enter your Minecraft server's port:", "e4mcbiat: change port", JOptionPane.PLAIN_MESSAGE, null, null, Integer.toString(e4mcClient.getMcPort()))).map(Object::toString).orElse(null);
                if (input == null || input.trim().isEmpty()) return;
                try {
                    int port = Integer.parseInt(input.trim());
                    if (port >= 1 && port <= 65535) {
                        e4mcClient.setMCPort(port);
                        return;
                    } else {
                        errorMessage = "Port must be between 1 and 65535!\n";
                    }
                } catch (NumberFormatException ex) {
                    errorMessage = "Invalid number format. Please enter a valid port.\n";
                }
            }
        });
    }

    private void onBroadcast(String string) {
        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(this, string, "e4mc Broadcast Message", JOptionPane.INFORMATION_MESSAGE));
    }

    private void onDomainAssigned(String string) {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> onDomainAssigned(string));
        }
        domain = string;
        copyDomainButton.setEnabled(true);
        label.setText("Connected");
    }

    public void runClient() {
        try {
            e4mcClient.run();
        } catch (IOException e) {
            SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(this, "Failed to run e4mc client:\n" + ExceptionUtil.toDetailedString(e), "Failed to run!", JOptionPane.ERROR_MESSAGE));
            dispose();
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        label = new JLabel();
        label.setText("Starting...");
        mainPanel.add(label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        setPortButton = new JButton();
        setPortButton.setText("Set MC Port");
        mainPanel.add(setPortButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        copyDomainButton = new JButton();
        copyDomainButton.setEnabled(false);
        copyDomainButton.setText("Copy IP");
        mainPanel.add(copyDomainButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
